#if __WINDOWS__
.VSBinPath_x64 = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.28.29617\bin\Hostx64\x64'
.VSLLVMPath_x64 = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\Llvm\x64\bin'
.VSIncludePath = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.28.29617\include'
.VSInstallPath = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview'
.VSLibPath_x64 = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.28.29617\lib\x64'
.WindowsSDKBasePath = 'C:\Program Files (x86)\Windows Kits\10'
.WindowsSDKIncludePath = 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um'
.WindowsSDKLibPath_x64 = 'C:\Program Files (x86)\Windows Kits\10\Lib\10.0.18362.0\um\x64'
.WindowsSDKSharedIncludePath = 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared'
.WindowsSDKUcrtIncludePath = 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt'
.WindowsSDKUcrtLibPath_x64 = 'C:\Program Files (x86)\Windows Kits\10\Lib\10.0.18362.0\ucrt\x64'
#endif

Compiler('Compiler-Clang') {
#if __WINDOWS__
    .Executable = '$VSLLVMPath_x64$\clang-cl.exe'
#endif
#if __OSX__
    .Executable = '/usr/bin/clang'
#endif
}

.projectBaseConfig = [
    .projectName = 'playground'

    .inputPath = 'src'
    .cFilePatterns = {'*.c'}
    .cppFilePatterns = {'*.cpp'}
]

.clangBaseConfig = [
    Using(.projectBaseConfig)

    .compiler = 'Compiler-Clang'
#if __WINDOWS__
    .linker = '$VSLLVMPath_x64$\lld-link.exe'
#endif
#if __OSX__
    .linker = '/usr/bin/clang'
#endif
    .compilerOptions = ' -o "%2" "%1" -c -Wall -Wextra -Wno-switch-enum -Wno-double-promotion -Wno-reserved-id-macro -Wno-shorten-64-to-32 -Wno-sign-conversion -Wno-missing-prototypes -Wno-#pragma-messages -Wno-newline-eof -Wno-c++98-compat-pedantic -fdiagnostics-absolute-paths -DDEBUG'

    .cCompilerFlags = ' '
    .cppCompilerFlags = ' '
]

#if __WINDOWS__
.clangWindowsConfig = [
    Using(.clangBaseConfig)
    .compilerOptions + ' -Z7 -Od -D_CRT_SECURE_NO_WARNINGS -DRENDERER_GL33' +
    ' -I"$VSIncludePath$" -I"$WindowsSDKIncludePath$" -I"$WindowsSDKSharedIncludePath$" -I"$WindowsSDKUcrtIncludePath$"'
    .cCompilerFlags + ' -TC'
    .cppCompilerFlags + ' -TP -std:c++17'
    .linkerOptions = ' "%1" -OUT:"%2" -SUBSYSTEM:CONSOLE -DEBUG -LIBPATH:"$VSLibPath_x64$" -LIBPATH:"$WindowsSDKLibPath_x64$" -LIBPATH:"$WindowsSDKUcrtLibPath_x64$" opengl32.lib gdi32.lib'

    .cUnityOutputPattern = 'UnityC*.c'
    .cppUnityOutputPattern = 'UnityCpp*.cpp'

    .unityInputExcludePath = 'src/macos'
]
#endif

#if __OSX__
.clangMacConfig = [
    Using(.clangBaseConfig)
    .compilerOptions + ' -g -O0 -fobjc-arc --target=arm64-apple-macos11'
    .cCompilerFlags + ' -x objective-c -std=c11'
    .cppCompilerFlags + ' -x objective-c++ -std=c++17'
    .linkerOptions = ' "%1" -o "%2" -framework AppKit -framework MetalKit -framework Metal --target=arm64-apple-macos11 -lc++'

    .cFilePatterns + {'*.m'}
    .cppFilePatterns + {'*.mm'}
    
    .cUnityOutputPattern = 'UnityC*.m'
    .cppUnityOutputPattern = 'UnityCpp*.mm'

    .unityInputExcludePath = 'src/windows'
]
#endif

.projectConfigs = {
#if __WINDOWS__
    .clangWindowsConfig,
#endif
#if __OSX__
    .clangMacConfig,
#endif
}

ForEach(.projectConfig in .projectConfigs) {
    Using(.projectConfig)

    Unity('Unity-$projectName$-C') {
        .UnityInputPath = .inputPath
        .UnityInputPattern = .cFilePatterns
        .UnityInputExcludePath = .unityInputExcludePath
        .UnityOutputPath = 'tmp'
        .UnityOutputPattern = .cUnityOutputPattern
    }

    Unity('Unity-$projectName$-Cpp') {
        .UnityInputPath = .inputPath
        .UnityInputPattern = .cppFilePatterns
        .UnityInputExcludePath = .unityInputExcludePath
        .UnityOutputPath = 'tmp'
        .UnityOutputPattern = .cppUnityOutputPattern
    }

    ObjectList('Obj-$projectName$-C') {
        .Compiler = .compiler
        .CompilerOptions = .compilerOptions + .cCompilerFlags
        .CompilerInputUnity = 'Unity-$projectName$-C'
        .CompilerOutputPath = 'tmp'
    }

    ObjectList('Obj-$projectName$-Cpp') {
        .Compiler = .compiler
        .CompilerOptions = .compilerOptions + .cppCompilerFlags
        .CompilerInputUnity = 'Unity-$projectName$-Cpp'
        .CompilerOutputPath = 'tmp'
    }

    Executable('Exe-$projectName$') {
        .Linker = .linker
#if __WINDOWS__
        .LinkerOutput = 'bin/$projectName$.exe'
#else
        .LinkerOutput = 'bin/$projectName$'
#endif
        .LinkerOptions = .linkerOptions
        .Libraries = {'Obj-$projectName$-C', 'Obj-$projectName$-Cpp'}
    }
}