Compiler('Compiler-Clang') {
    .Executable = '/usr/bin/clang'
}

.clangBaseConfig = [
    .compiler = 'Compiler-Clang'
    .linker = '/usr/bin/clang'
    .compilerOptions = ' -o "%2" "%1" -c -g -std=c11 -O0 -fobjc-arc -fdiagnostics-absolute-paths --target=arm64-apple-macos11'
    .linkerOptions = ' "%1" -o "%2" -framework AppKit -framework MetalKit -framework Metal --target=arm64-apple-macos11'
]

.projectName = 'playground'

{
    Using(.clangBaseConfig)
    ObjectList('Obj-$projectName$') {
        .Compiler = .compiler
        .CompilerOptions = .compilerOptions
        .CompilerInputPath = 'src'
        .CompilerInputPattern = {'*.c', '*.m'}
        .CompilerOutputPath = 'tmp'
    }

    Executable('Exe-$projectName$') {
        .Linker = .linker
        .LinkerOutput = 'output/$projectName$_stub'
        .LinkerOptions = .linkerOptions
        .Libraries = 'Obj-$projectName$'
    }

    Unity('Unity-$projectName$') {
        .UnityInputPath = 'src'
        .UnityInputPattern = {'*.c', '*.m'}
        .UnityOutputPath = 'tmp'
        .UnityOutputPattern = 'Unity*.m'
    }

    ObjectList('Obj-$projectName$-Unity') {
        .Compiler = .compiler
        .CompilerOptions = .compilerOptions + ' -Wno-#pragma-messages '
        .CompilerInputUnity = 'Unity-$projectName$'
        .CompilerOutputPath = 'tmp'
    }

    Executable('Exe-$projectName$-Unity') {
        .Linker = .linker
        .LinkerOutput = 'bin/$projectName$'
        .LinkerOptions = .linkerOptions
        .Libraries = 'Obj-$projectName$-Unity'
    }
}